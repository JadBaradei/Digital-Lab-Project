|TOP_Module
clk_50Mhz => clk_50Mhz.IN3
reset => ~NO_FANOUT~
SW[0] => SW[0].IN1
SW[1] => SW[1].IN1
SW[2] => SW[2].IN1
SW[3] => SW[3].IN1
SW[4] => SW[4].IN1
SW[5] => SW[5].IN1
SW[6] => SW[6].IN1
SW[7] => SW[7].IN1
SW[8] => SW[8].IN1
lcd_data[0] <= LCD_module:ready_to_play.LCD_DATA
lcd_data[1] <= LCD_module:ready_to_play.LCD_DATA
lcd_data[2] <= LCD_module:ready_to_play.LCD_DATA
lcd_data[3] <= LCD_module:ready_to_play.LCD_DATA
lcd_data[4] <= LCD_module:ready_to_play.LCD_DATA
lcd_data[5] <= LCD_module:ready_to_play.LCD_DATA
lcd_data[6] <= LCD_module:ready_to_play.LCD_DATA
lcd_data[7] <= LCD_module:ready_to_play.LCD_DATA
lcd_rw <= LCD_module:ready_to_play.LCD_RW
lcd_en <= LCD_module:ready_to_play.LCD_EN
lcd_rs <= LCD_module:ready_to_play.LCD_RS
HEX0[0] <= power_selection:select_your_power.oHEX_D1
HEX0[1] <= power_selection:select_your_power.oHEX_D1
HEX0[2] <= power_selection:select_your_power.oHEX_D1
HEX0[3] <= power_selection:select_your_power.oHEX_D1
HEX0[4] <= power_selection:select_your_power.oHEX_D1
HEX0[5] <= power_selection:select_your_power.oHEX_D1
HEX0[6] <= power_selection:select_your_power.oHEX_D1
HEX1[0] <= power_selection:select_your_power.oHEX_D2
HEX1[1] <= power_selection:select_your_power.oHEX_D2
HEX1[2] <= power_selection:select_your_power.oHEX_D2
HEX1[3] <= power_selection:select_your_power.oHEX_D2
HEX1[4] <= power_selection:select_your_power.oHEX_D2
HEX1[5] <= power_selection:select_your_power.oHEX_D2
HEX1[6] <= power_selection:select_your_power.oHEX_D2
LEDR <= STATE_Manager:comb_3.LEDR


|TOP_Module|clock_devider:clk_div
clk_in => clk_out_slow~reg0.CLK
clk_in => counter1[0].CLK
clk_in => counter1[1].CLK
clk_in => counter1[2].CLK
clk_in => counter1[3].CLK
clk_in => counter1[4].CLK
clk_in => counter1[5].CLK
clk_in => counter1[6].CLK
clk_in => counter1[7].CLK
clk_in => counter1[8].CLK
clk_in => counter1[9].CLK
clk_in => counter1[10].CLK
clk_in => counter1[11].CLK
clk_in => counter1[12].CLK
clk_in => counter1[13].CLK
clk_in => counter1[14].CLK
clk_in => counter1[15].CLK
clk_in => counter1[16].CLK
clk_in => counter1[17].CLK
clk_in => counter1[18].CLK
clk_in => counter1[19].CLK
clk_in => counter1[20].CLK
clk_in => counter1[21].CLK
clk_in => counter1[22].CLK
clk_in => counter1[23].CLK
clk_in => counter1[24].CLK
clk_in => counter1[25].CLK
clk_in => counter1[26].CLK
clk_in => counter1[27].CLK
clk_in => counter1[28].CLK
clk_in => counter1[29].CLK
clk_in => clk_out~reg0.CLK
clk_in => counter[0].CLK
clk_in => counter[1].CLK
clk_in => counter[2].CLK
clk_in => counter[3].CLK
clk_in => counter[4].CLK
clk_in => counter[5].CLK
clk_in => counter[6].CLK
clk_in => counter[7].CLK
clk_in => counter[8].CLK
clk_in => counter[9].CLK
clk_in => counter[10].CLK
clk_in => counter[11].CLK
clk_in => counter[12].CLK
clk_in => counter[13].CLK
clk_in => counter[14].CLK
clk_in => counter[15].CLK
clk_in => counter[16].CLK
clk_in => counter[17].CLK
clk_in => counter[18].CLK
clk_in => counter[19].CLK
clk_in => counter[20].CLK
clk_in => counter[21].CLK
clk_in => counter[22].CLK
clk_in => counter[23].CLK
clk_in => counter[24].CLK
clk_in => counter[25].CLK
clk_in => counter[26].CLK
clk_in => counter[27].CLK
clk_in => counter[28].CLK
clk_in => counter[29].CLK
clk_out <= clk_out~reg0.DB_MAX_OUTPUT_PORT_TYPE
clk_out_slow <= clk_out_slow~reg0.DB_MAX_OUTPUT_PORT_TYPE


|TOP_Module|STATE_Manager:comb_3
clk => LEDR~reg0.CLK
clk => picked_first_power.CLK
clk => picked_second_power.CLK
clk => state[0]~reg0.CLK
clk => state[1]~reg0.CLK
clk => state[2]~reg0.CLK
clk => state[3]~reg0.CLK
clk => counter[0].CLK
clk => counter[1].CLK
clk => counter[2].CLK
clk => counter[3].CLK
clk => counter[4].CLK
clk => counter[5].CLK
clk => counter[6].CLK
clk => counter[7].CLK
clk => counter[8].CLK
clk => counter[9].CLK
clk => counter[10].CLK
clk => counter[11].CLK
clk => counter[12].CLK
clk => counter[13].CLK
clk => counter[14].CLK
clk => counter[15].CLK
clk => counter[16].CLK
clk => counter[17].CLK
clk => counter[18].CLK
clk => counter[19].CLK
clk => counter[20].CLK
clk => counter[21].CLK
clk => counter[22].CLK
clk => counter[23].CLK
clk => counter[24].CLK
clk => counter[25].CLK
clk => counter[26].CLK
clk => counter[27].CLK
clk => counter[28].CLK
clk => counter[29].CLK
clk_slow => ~NO_FANOUT~
SW[0] => state.OUTPUTSELECT
SW[0] => state.OUTPUTSELECT
SW[0] => state.OUTPUTSELECT
SW[0] => state.OUTPUTSELECT
SW[1] => state.OUTPUTSELECT
SW[1] => state.OUTPUTSELECT
SW[1] => state.OUTPUTSELECT
SW[1] => state.OUTPUTSELECT
SW[2] => state.OUTPUTSELECT
SW[2] => state.OUTPUTSELECT
SW[2] => state.OUTPUTSELECT
SW[2] => state.OUTPUTSELECT
SW[3] => always0.IN0
SW[3] => always0.IN0
SW[3] => always0.IN0
SW[4] => always0.IN1
SW[4] => always0.IN1
SW[4] => always0.IN1
SW[5] => ~NO_FANOUT~
SW[6] => ~NO_FANOUT~
SW[7] => ~NO_FANOUT~
SW[8] => ~NO_FANOUT~
state[0] <= state[0]~reg0.DB_MAX_OUTPUT_PORT_TYPE
state[1] <= state[1]~reg0.DB_MAX_OUTPUT_PORT_TYPE
state[2] <= state[2]~reg0.DB_MAX_OUTPUT_PORT_TYPE
state[3] <= state[3]~reg0.DB_MAX_OUTPUT_PORT_TYPE
LEDR <= LEDR~reg0.DB_MAX_OUTPUT_PORT_TYPE


|TOP_Module|LCD_module:ready_to_play
clk => clk.IN1
rst_n => rst_n.IN1
state[0] => Decoder0.IN3
state[1] => Decoder0.IN2
state[2] => Decoder0.IN1
state[3] => Decoder0.IN0
LCD_DATA[0] <= LCD_Controller:u0.LCD_DATA
LCD_DATA[1] <= LCD_Controller:u0.LCD_DATA
LCD_DATA[2] <= LCD_Controller:u0.LCD_DATA
LCD_DATA[3] <= LCD_Controller:u0.LCD_DATA
LCD_DATA[4] <= LCD_Controller:u0.LCD_DATA
LCD_DATA[5] <= LCD_Controller:u0.LCD_DATA
LCD_DATA[6] <= LCD_Controller:u0.LCD_DATA
LCD_DATA[7] <= LCD_Controller:u0.LCD_DATA
LCD_RW <= LCD_Controller:u0.LCD_RW
LCD_EN <= LCD_Controller:u0.LCD_EN
LCD_RS <= LCD_Controller:u0.LCD_RS


|TOP_Module|LCD_module:ready_to_play|LCD_Controller:u0
iDATA[0] => LCD_DATA[0].DATAIN
iDATA[1] => LCD_DATA[1].DATAIN
iDATA[2] => LCD_DATA[2].DATAIN
iDATA[3] => LCD_DATA[3].DATAIN
iDATA[4] => LCD_DATA[4].DATAIN
iDATA[5] => LCD_DATA[5].DATAIN
iDATA[6] => LCD_DATA[6].DATAIN
iDATA[7] => LCD_DATA[7].DATAIN
iRS => LCD_RS.DATAIN
iStart => preStart.DATAIN
iStart => Equal0.IN0
oDone <= oDone~reg0.DB_MAX_OUTPUT_PORT_TYPE
iCLK => Cont[0].CLK
iCLK => Cont[1].CLK
iCLK => Cont[2].CLK
iCLK => Cont[3].CLK
iCLK => Cont[4].CLK
iCLK => mStart.CLK
iCLK => preStart.CLK
iCLK => LCD_EN~reg0.CLK
iCLK => oDone~reg0.CLK
iCLK => ST~5.DATAIN
iRST_N => Cont[0].ACLR
iRST_N => Cont[1].ACLR
iRST_N => Cont[2].ACLR
iRST_N => Cont[3].ACLR
iRST_N => Cont[4].ACLR
iRST_N => mStart.ACLR
iRST_N => preStart.ACLR
iRST_N => LCD_EN~reg0.ACLR
iRST_N => oDone~reg0.ACLR
iRST_N => ST~7.DATAIN
LCD_DATA[0] <= iDATA[0].DB_MAX_OUTPUT_PORT_TYPE
LCD_DATA[1] <= iDATA[1].DB_MAX_OUTPUT_PORT_TYPE
LCD_DATA[2] <= iDATA[2].DB_MAX_OUTPUT_PORT_TYPE
LCD_DATA[3] <= iDATA[3].DB_MAX_OUTPUT_PORT_TYPE
LCD_DATA[4] <= iDATA[4].DB_MAX_OUTPUT_PORT_TYPE
LCD_DATA[5] <= iDATA[5].DB_MAX_OUTPUT_PORT_TYPE
LCD_DATA[6] <= iDATA[6].DB_MAX_OUTPUT_PORT_TYPE
LCD_DATA[7] <= iDATA[7].DB_MAX_OUTPUT_PORT_TYPE
LCD_RW <= <GND>
LCD_EN <= LCD_EN~reg0.DB_MAX_OUTPUT_PORT_TYPE
LCD_RS <= iRS.DB_MAX_OUTPUT_PORT_TYPE


|TOP_Module|power_selection:select_your_power
state[0] => Mux0.IN19
state[0] => Mux1.IN19
state[0] => Mux2.IN19
state[0] => Mux3.IN19
state[1] => Mux0.IN18
state[1] => Mux1.IN18
state[1] => Mux2.IN18
state[1] => Mux3.IN18
state[2] => Mux0.IN17
state[2] => Mux1.IN17
state[2] => Mux2.IN17
state[2] => Mux3.IN17
state[3] => Mux0.IN16
state[3] => Mux1.IN16
state[3] => Mux2.IN16
state[3] => Mux3.IN16
oHEX_D1[0] <= <GND>
oHEX_D1[1] <= <GND>
oHEX_D1[2] <= <GND>
oHEX_D1[3] <= <GND>
oHEX_D1[4] <= <GND>
oHEX_D1[5] <= <GND>
oHEX_D1[6] <= <VCC>
oHEX_D2[0] <= oHEX_D2[0]$latch.DB_MAX_OUTPUT_PORT_TYPE
oHEX_D2[1] <= <GND>
oHEX_D2[2] <= oHEX_D2[2]$latch.DB_MAX_OUTPUT_PORT_TYPE
oHEX_D2[3] <= oHEX_D2[3]$latch.DB_MAX_OUTPUT_PORT_TYPE
oHEX_D2[4] <= oHEX_D2[4]$latch.DB_MAX_OUTPUT_PORT_TYPE
oHEX_D2[5] <= <VCC>
oHEX_D2[6] <= oHEX_D2[6]$latch.DB_MAX_OUTPUT_PORT_TYPE


